{"version":1,"targetEnvironment":"5","plan":{"addedTable":{},"alteredTable":{},"deletedTable":{}},"environmentState":{"steps":{"1":{"operation":{"database":"","dataset":"","locationID":2,"locationName":"SOURCE","metadata":{"columns":[{"acceptedValues":{"strictMatch":true,"values":[]},"appliedColumnTests":{},"columnReference":{"columnCounter":1,"stepCounter":1},"config":{},"dataType":"NUMBER(38,0)","defaultValue":"","description":"","name":"C_CUSTKEY","nullable":false,"primaryKey":false,"uniqueKey":false},{"acceptedValues":{"strictMatch":true,"values":[]},"appliedColumnTests":{},"columnReference":{"columnCounter":2,"stepCounter":1},"config":{},"dataType":"VARCHAR(25)","defaultValue":"","description":"","name":"C_NAME","nullable":false,"primaryKey":false,"uniqueKey":false},{"acceptedValues":{"strictMatch":true,"values":[]},"appliedColumnTests":{},"columnReference":{"columnCounter":3,"stepCounter":1},"config":{},"dataType":"VARCHAR(40)","defaultValue":"","description":"","name":"C_ADDRESS","nullable":false,"primaryKey":false,"uniqueKey":false},{"acceptedValues":{"strictMatch":true,"values":[]},"appliedColumnTests":{},"columnReference":{"columnCounter":4,"stepCounter":1},"config":{},"dataType":"NUMBER(38,0)","defaultValue":"","description":"","name":"C_NATIONKEY","nullable":false,"primaryKey":false,"uniqueKey":false},{"acceptedValues":{"strictMatch":true,"values":[]},"appliedColumnTests":{},"columnReference":{"columnCounter":5,"stepCounter":1},"config":{},"dataType":"VARCHAR(15)","defaultValue":"","description":"","name":"C_PHONE","nullable":false,"primaryKey":false,"uniqueKey":false},{"acceptedValues":{"strictMatch":true,"values":[]},"appliedColumnTests":{},"columnReference":{"columnCounter":6,"stepCounter":1},"config":{},"dataType":"NUMBER(12,2)","defaultValue":"","description":"","name":"C_ACCTBAL","nullable":false,"primaryKey":false,"uniqueKey":false},{"acceptedValues":{"strictMatch":true,"values":[]},"appliedColumnTests":{},"columnReference":{"columnCounter":7,"stepCounter":1},"config":{},"dataType":"VARCHAR(10)","defaultValue":"","description":"","name":"C_MKTSEGMENT","nullable":true,"primaryKey":false,"uniqueKey":false},{"acceptedValues":{"strictMatch":true,"values":[]},"appliedColumnTests":{},"columnReference":{"columnCounter":8,"stepCounter":1},"config":{},"dataType":"VARCHAR(117)","defaultValue":"","description":"","name":"C_COMMENT","nullable":true,"primaryKey":false,"uniqueKey":false}],"join":{"joinCondition":"FROM {{ ref('SOURCE', 'CUSTOMER') }}"}},"name":"CUSTOMER","schema":"","sqlType":"Source","table":"CUSTOMER","type":"sourceInput"},"stepCounter":"1","name":"CUSTOMER"},"10":{"operation":{"config":{"insertStrategy":"INSERT","postSQL":"","preSQL":"","testsEnabled":true,"truncateBefore":true},"database":"","dependencies":[],"description":"","isDataVault":false,"isMultisource":false,"locationID":3,"locationName":"TARGET","materializationType":"table","metadata":{"appliedNodeTests":[],"columns":[{"columnReference":{"columnCounter":66,"stepCounter":10},"dataType":"NUMBER(38,0)","description":"","hashColumns":[],"hashDetails":null,"name":"C_CUSTKEY","nullable":false,"sourceColumnReferences":[{"columnReferences":[{"columnCounter":1,"stepCounter":"1"}],"transform":""}]},{"columnReference":{"columnCounter":67,"stepCounter":10},"dataType":"VARCHAR(25)","description":"","hashColumns":[],"hashDetails":null,"name":"C_NAME","nullable":false,"sourceColumnReferences":[{"columnReferences":[{"columnCounter":2,"stepCounter":"1"}],"transform":"LOWER(\"CUSTOMER\".\"C_NAME\")"}]},{"columnReference":{"columnCounter":68,"stepCounter":10},"dataType":"VARCHAR(50)","description":"","hashColumns":[],"hashDetails":null,"name":"C_ADDRESS","nullable":false,"sourceColumnReferences":[{"columnReferences":[{"columnCounter":3,"stepCounter":"1"}],"transform":""}]},{"columnReference":{"columnCounter":69,"stepCounter":10},"dataType":"VARCHAR(40)","description":"","hashColumns":[],"hashDetails":null,"name":"C_NATIONKEY","nullable":false,"sourceColumnReferences":[{"columnReferences":[{"columnCounter":4,"stepCounter":"1"}],"transform":"{{even_odd('\"CUSTOMER\".\"C_NATIONKEY\"')}}"}]},{"columnReference":{"columnCounter":70,"stepCounter":10},"dataType":"VARCHAR(15)","description":"","hashColumns":[],"hashDetails":null,"name":"C_PHONE","nullable":false,"sourceColumnReferences":[{"columnReferences":[{"columnCounter":5,"stepCounter":"1"}],"transform":"'{{parameters.foo}}'"}]},{"columnReference":{"columnCounter":71,"stepCounter":10},"dataType":"NUMBER(12,2)","description":"","hashColumns":[],"hashDetails":null,"name":"C_ACCTBAL","nullable":false,"sourceColumnReferences":[{"columnReferences":[{"columnCounter":6,"stepCounter":"1"}],"transform":""}]},{"columnReference":{"columnCounter":72,"stepCounter":10},"dataType":"VARCHAR(10)","description":"","hashColumns":[],"hashDetails":null,"name":"C_MKTSEGMENT","nullable":true,"sourceColumnReferences":[{"columnReferences":[{"columnCounter":7,"stepCounter":"1"}],"transform":"LOWER(\"CUSTOMER\".\"C_MKTSEGMENT\")"}]}],"cteString":"","enabledColumnTestIDs":[],"sourceMapping":[{"aliases":{"CUSTOMER":"1"},"customSQL":{"customSQL":""},"dependencies":[{"locationName":"SOURCE","nodeName":"CUSTOMER"}],"join":{"joinCondition":"FROM {{ ref('SOURCE', 'CUSTOMER') }} \"CUSTOMER\"\r\nWHERE \"C_ACCTBAL\" > 8000"},"name":"STG_CUSTOMER","noLinkRefs":[]}]},"name":"STG_CUSTOMER","overrideSQL":false,"schema":"","sqlType":"Stage","type":"sql"},"stepCounter":"10","name":"STG_CUSTOMER"}},"folders":{},"jobs":{},"macros":{"1":{"id":"1","macroString":"{%- macro even_odd(column) -%}\r\n    CASE WHEN MOD({{ column }}, 2) = 0 THEN 'EVEN' ELSE 'ODD' END\r\n{%- endmacro %}"}},"stepTypes":{"4":{"id":"4","isDisabled":true,"metadata":{"error":null,"nodeMetadataSpec":"capitalized: Copy of Stage\nshort: STG\nplural: Stages\ntagColor: '#2EB67D'\n\nconfig:\n- groupName: Options\n  items:\n  - type: materializationSelector\n    default: table\n    options:\n    - table\n    - view\n    isRequired: true\n\n  - type: multisourceToggle\n    enableIf: \"{% if node.materializationType == 'table' %} true {% else %} false {% endif %}\" \n\n  - type: overrideSQLToggle\n    enableIf: \"{% if node.materializationType == 'view' %} true {% else %} false {% endif %}\"\n    \n  - displayName: Multi Source Strategy\n    attributeName: insertStrategy\n    type: dropdownSelector\n    default: INSERT\n    options:\n    - \"INSERT\"\n    - \"UNION\"\n    - \"UNION ALL\"\n    isRequired: true\n    enableIf: \"{% if node.isMultisource %} true {% else %} false {% endif %}\"\n\n  - displayName: Truncate Before\n    attributeName: truncateBefore\n    type: toggleButton\n    default: true\n\n  - displayName: Enable Tests\n    attributeName: testsEnabled\n    type: toggleButton\n    default: true\n    \n  - displayName: Pre-SQL\n    attributeName: preSQL\n    type: textBox\n    syntax: sql\n    isRequired: false\n\n  - displayName: Post-SQL\n    attributeName: postSQL\n    type: textBox\n    syntax: sql\n    isRequired: false\n","templates":{"create":{"templateString":"{% if node.override.create.enabled %}\n\t\n\t{{ node.override.create.script }}\n\n{% elif node.materializationType == 'table' %}\n\t{{ stage('Create Stage Table') }}\n\n\tCREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}\n\t(\n\t\t{% for col in columns %}\n\t\t\t\"{{ col.name }}\" {{ col.dataType }}\n\t\t\t{%- if not col.nullable %} NOT NULL\n\t\t\t\t{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}\n\t\t\t{% endif %}\n\t\t\t{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\t)\n\t{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n\n\n{% elif node.materializationType == 'view' %}\n    {{ stage('Create Stage View') }}\n\n    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}\n    (\n        {% for col in columns %}\n            \"{{ col.name }}\"\n            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n            {%- if not loop.last -%}, {% endif %}\n        {% endfor %}\n    )\n    {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n    AS\n    {% for source in sources %}\n        SELECT\n        {% for col in source.columns %}\n            {{ get_source_transform(col) }} AS \"{{ col.name }}\"\n            {%- if not loop.last -%}, {% endif %}\n        {% endfor %}\n\n        {{ source.join }}\n\n        {% if not loop.last %}\n            {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}\n                {{ config.insertStrategy }}\n            {% else %}\n                UNION\n            {% endif %}\n        {% endif %}\n    {% endfor %}\n\n{% endif %}\n"},"run":{"templateString":"\n    {% for test in node.tests if config.testsEnabled %}\n        {% if test.runOrder == 'Before' %}\n            {{ test_stage(test.name, test.continueOnFailure) }}\n            {{ test.templateString }}\n        {% endif %}\n    {% endfor %}\n\n{% if node.materializationType == 'table' %}\n\t{% if config.preSQL %}\n\t\t{{ stage('Pre-SQL') }}\n\t\t{{ config.preSQL }}\n\t{% endif %}\n\t\n\t\n\t\n\t\t{% if config.truncateBefore %}\n\t\n\t\t\t{{ stage('Truncate Stage Table') }}\n\t\t\tTRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}\n\t\n\t\t{% endif %}\n\t\n\t\n\t\t{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}\n\t\t\t{{ stage( config.insertStrategy + ' Sources' | string ) }}\n\t\t\tINSERT INTO {{ ref_no_link(node.location.name, node.name) }}\n\t\t\t\t(\n\t\t\t\t\t{% for col in columns %}\n\t\t\t\t\t\t\"{{ col.name }}\"\n\t\t\t\t\t\t{%- if not loop.last -%},{% endif %}\n\t\t\t\t\t{% endfor %}\n\t\t\t\t)\n\t\t{% endif %}\n\t\n\t\n\t\t{% for source in sources %}\n\t\n\t\t\t{% if config.insertStrategy == 'INSERT' %}\n\t\t\t\t{{ stage('Insert ' + source.name | string ) }}\n\t\n\t\t\t\tINSERT INTO {{ ref_no_link(node.location.name, node.name) }}\n\t\t\t\t(\n\t\t\t\t\t{% for col in source.columns %}\n\t\t\t\t\t\t\"{{ col.name }}\"\n\t\t\t\t\t\t{%- if not loop.last -%},{% endif %}\n\t\t\t\t\t{% endfor %}\n\t\t\t\t)\n\t\t\t{% endif %}\n\t\n\t\t\tSELECT\n\t\t\t{% for col in source.columns %}\n                {{ get_source_transform(col) }} AS \"{{ col.name }}\"\n\t\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t\t{% endfor %}\n\t\n\t\t\t{{ source.join }}\n\t\n\t\t\t{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}\n\t\t\t\t{{config.insertStrategy}}\n\t\t\t{% endif %}\n\t\n\t\t{% endfor %}\n\t\n\t{% if config.postSQL %}\n\t\t{{ stage('Post-SQL') }}\n\t\t{{ config.postSQL }}\n\t{% endif %}\n{% endif %}\n\n{% if config.testsEnabled %}\n\t{% for test in node.tests %}\n\t\t{% if test.runOrder == 'After' %}\n\t\t\t{{ test_stage(test.name, test.continueOnFailure) }}\n\t\t\t{{ test.templateString }}\n        {% endif %}\n\t{% endfor %}\n\n\t{% for column in columns %}\n\t\t{% for test in column.tests %}\n\t\t\t{{ test_stage(column.name + \": \" + test.name) }}\n\t\t\t{{ test.templateString }}\n\t\t{% endfor %}\n\t{% endfor %}\n{% endif %}\n"}}},"name":"Copy of Stage","version":1},"6":{"id":"6","isDisabled":true,"metadata":{"error":null,"nodeMetadataSpec":"capitalized: New Type\nshort: NEW\ntagColor: gray\nplural: New Types","templates":{"create":{"templateString":""},"run":{"templateString":""}}},"name":"New Type","version":1},"Dimension":{"id":"Dimension","isDisabled":false,"metadata":{"defaultStorageLocation":null,"error":null,"nodeMetadataSpec":"capitalized: Dimension\nshort: DIM\ntagColor: '#1E339A'\nplural: Dimensions\n\nconfig:\n- groupName: Options\n  items:\n  - type: materializationSelector\n    isRequired: true\n    default: table\n    options:\n    - table\n    - view\n\n  - type: multisourceToggle\n    enableIf: \"{% if node.materializationType == 'table' %} true {% else %} false {% endif %}\"\n\n  - type: businessKeyColumns\n    isRequired: true\n\n  - type: changeTrackingColumns\n    isRequired: false\n\n  - type: overrideSQLToggle\n    enableIf: \"{% if node.materializationType == 'view' %} true {% else %} false {% endif %}\"\n\n  - displayName: Enable Tests\n    attributeName: testsEnabled\n    type: toggleButton\n    default: true\n    \n  - displayName: Pre-SQL\n    attributeName: preSQL\n    type: textBox\n    syntax: sql\n    isRequired: false\n\n  - displayName: Post-SQL\n    attributeName: postSQL\n    type: textBox\n    syntax: sql\n    isRequired: false\n\nsystemColumns:\n- displayName: '{{NODE_NAME}}_KEY'\n  transform: ''\n  dataType: NUMBER\n  placement: beginning\n  attributeName: isSurrogateKey\n\n- displayName: SYSTEM_VERSION\n  transform: ''\n  dataType: NUMBER\n  placement: end\n  attributeName: isSystemVersion\n\n- displayName: SYSTEM_CURRENT_FLAG\n  transform: ''\n  dataType: VARCHAR\n  placement: end\n  attributeName: isSystemCurrentFlag\n\n- displayName: SYSTEM_START_DATE\n  transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)\n  dataType: TIMESTAMP\n  placement: end\n  attributeName: isSystemStartDate\n\n- displayName: SYSTEM_END_DATE\n  transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)\n  dataType: TIMESTAMP\n  placement: end\n  attributeName: isSystemEndDate\n\n- displayName: SYSTEM_CREATE_DATE\n  transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)\n  dataType: TIMESTAMP\n  placement: end\n  attributeName: isSystemCreateDate\n\n- displayName: SYSTEM_UPDATE_DATE\n  transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)\n  dataType: TIMESTAMP\n  placement: end\n  attributeName: isSystemUpdateDate","templates":{"create":{"templateString":"{% if node.materializationType == 'table' %}\n\t{{ stage('Create Dimension Table') }}\n\n\tCREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}\n\t(\n\t\t{% for col in columns %}\n\t\t\t\"{{ col.name }}\" {{ col.dataType }}\n\t\t\t{% if col.isSurrogateKey %}\n\t\t        identity\n\t\t\t{% endif %}\n\t\t\t{%- if not col.nullable %} NOT NULL\n\t\t\t\t{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}\n\t\t\t{% endif %}\n\t\t\t{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\t)\n\t{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n\n\n{% elif node.materializationType == 'view' %}\n\t{{ stage('Create Dimension View') }}\n\n\tCREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}\n\t(\n\t\t{% for col in columns %}\n\t\t\t\"{{ col.name }}\"\n\t\t\t{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n\t\t\t{%- if not loop.last -%},{% endif %}\n\t\t{% endfor %}\n\t)\n\t{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n\tAS\n\t{% for source in sources %}\n\n\t\t{% if loop.first %}SELECT {% endif %}\n\n\t\t{% for col in source.columns %}\n\t\t\t{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}\n                NULL\n\t\t\t{% else %}\n                {{ get_source_transform(col) }}\n\t\t\t{% endif %}\n\t\t\tAS \"{{ col.name }}\"\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\t\t{{ source.join }}\n\n\t\t{% if not loop.last %} UNION ALL {% endif %}\n\t{% endfor %}\n\n{% endif %}\n"},"run":{"templateString":"\n{% set is_type_2 = columns | selectattr(\"isChangeTracking\") | list | length > 0 %}\n\n    {% for test in node.tests if config.testsEnabled %}\n        {% if test.runOrder == 'Before' %}\n            {{ test_stage(test.name, test.continueOnFailure) }}\n            {{ test.templateString }}\n        {% endif %}\n    {% endfor %}\n\n{% if node.materializationType == 'table' %}\n\n\t{% if config.preSQL %}\t\t\t\n\t\t{{ stage('Pre-SQL') }}\n\t\t{{ config.preSQL }}\n\t{% endif %}\n\t\n    {% if is_type_2 %}\n\n        {% for source in sources %}\n            {{ stage('MERGE ' + source.name | string) }}\n            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} \"TGT\"\n            USING (\n            /* New Rows That Don't Exist */\n            SELECT\n            {% for col in source.columns if not col.isSurrogateKey %}\n                {% if col.isSystemVersion %}\n                    1\n                {% elif col.isSystemCurrentFlag %}\n                    'Y'\n                {% else %}\n                   {{ get_source_transform(col) }}\n                {% endif %}\n                AS \"{{ col.name }}\",\n            {% endfor %}\n                'INSERT_INITAL_VERSION_ROWS' AS \"DML_OPERATION\"\n            {{ source.join }}\n            LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} \"DIM\" ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                    {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %}\n            WHERE\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                \"DIM\".\"{{ col.name }}\" IS NULL\n            {% endfor %}\n            UNION ALL\n            /* New Row Needing To Be Inserted Due To Type-2 Column Changes */\n            SELECT\n            {% for col in source.columns if not col.isSurrogateKey %}\n                {% if col.isSystemVersion %}\n                    \"DIM\".\"{{ col.name }}\" + 1\n                {% elif col.isSystemCurrentFlag %}\n                    'Y'\n                {% else %}\n                   {{ get_source_transform(col) }}\n                {% endif %}\n                AS \"{{ col.name }}\",\n            {% endfor %}\n                'INSERT_NEW_VERSION_ROWS' AS \"DML_OPERATION\"\n            {{ source.join }}\n            INNER JOIN {{ ref_no_link(node.location.name, node.name) }} \"DIM\" ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %}\n            WHERE \"DIM\".\"{{ get_value_by_column_attribute(\"isSystemCurrentFlag\") }}\" = 'Y'\n            {% for col in source.columns if (col.isChangeTracking == true) %}\n                {% if loop.first %}\n                    AND (\n                {% else %}\n                    OR\n                {% endif %}\n                ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST(\"DIM\".\"{{ col.name }}\" as STRING), '**NULL**') )\n                {% if loop.last %}\n                    )\n                {% endif %}\n            {% endfor %}\n            UNION ALL\n            /* Rows Needing To Be Expired Due To Type-2 Column Changes\n            In this case, only two columns are merged (version and end date) */\n            SELECT\n            {%- for col in source.columns if not col.isSurrogateKey %}\n                {% if col.isSystemEndDate %}\n                    DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))\n                {% elif col.isSystemCurrentFlag %}\n                    'N'\n                {% else %}\n                    \"DIM\".\"{{ col.name }}\"\n                {% endif %}\n                AS \"{{ col.name }}\",\n            {% endfor -%}\n                'update_expired_version_rows' AS \"DML_OPERATION\"\n            {{ source.join }}\n            INNER JOIN {{ ref_no_link(node.location.name, node.name) }} \"DIM\" ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %}\n            WHERE \"DIM\".\"{{ get_value_by_column_attribute(\"isSystemCurrentFlag\") }}\" = 'Y'\n            {% for col in source.columns if (col.isChangeTracking == true) %}\n                {% if loop.first %}\n                    AND (\n                {% else %}\n                    OR\n                {% endif %}\n                ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST(\"DIM\".\"{{ col.name }}\" as STRING), '**NULL**') )\n                {% if loop.last %}\n                    )\n                {% endif %}\n            {% endfor %}\n            UNION ALL\n            /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns\n            This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/\n            SELECT\n            {%- for col in source.columns if not col.isSurrogateKey %}\n                {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}\n                    \"DIM\".\"{{ col.name }}\"\n                {% elif col.isSystemCurrentFlag %}\n                    'Y'\n                {% else %}\n                    {{ get_source_transform(col) }}\n                {% endif %}\n                AS \"{{ col.name }}\",\n            {% endfor -%}\n                'UPDATE_NON_TYPE2_ROWS' AS \"DML_OPERATION\"\n            {{ source.join }}\n            INNER JOIN {{ ref_no_link(node.location.name, node.name) }} \"DIM\" ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %}\n            WHERE \"DIM\".\"{{ get_value_by_column_attribute(\"isSystemCurrentFlag\") }}\" = 'Y'\n            AND (\n            {% for col in source.columns if (col.isChangeTracking) -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %} )\n            {% for col in source.columns if not (   col.isBusinessKey or\n                                                    col.isChangeTracking or\n                                                    col.isSurrogateKey or\n                                                    col.isSystemVersion or\n                                                    col.isSystemCurrentFlag or\n                                                    col.isSystemStartDate or\n                                                    col.isSystemEndDate or\n                                                    col.isSystemUpdateDate or\n                                                    col.isSystemCreateDate) -%}\n                {% if loop.first %}\n                    AND (\n                {% endif %}\n                {% if not loop.first %}\n                    OR\n                {% endif %}\n                NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST(\"DIM\".\"{{ col.name }}\" as STRING), '**NULL**')\n                {% if loop.last %}\n                    )\n                {% endif %}\n            {% endfor %}\n        ) AS \"SRC\"\n        ON\n        {% for col in source.columns if col.isBusinessKey -%}\n            {% if not loop.first %}\n                AND\n            {% endif %}\n            \"TGT\".\"{{ col.name }}\" = \"SRC\".\"{{ col.name }}\"\n        {% endfor %}\n        AND \"TGT\".\"{{ get_value_by_column_attribute(\"isSystemVersion\") }}\" = \"SRC\".\"{{ get_value_by_column_attribute(\"isSystemVersion\") }}\"\n        WHEN MATCHED THEN UPDATE SET\n        {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}\n            \"TGT\".\"{{ col.name }}\" = \"SRC\".\"{{ col.name }}\"\n            {% if not loop.last %}, {% endif %}\n        {% endfor -%}\n        WHEN NOT MATCHED THEN INSERT (\n        {%- for col in source.columns if not col.isSurrogateKey %}\n            \"{{ col.name }}\"\n            {% if not loop.last %}, {% endif %}\n        {% endfor -%}\n        )\n        VALUES (\n        {%- for col in source.columns if not col.isSurrogateKey %}\n            \"SRC\".\"{{ col.name }}\"\n            {% if not loop.last %}, {% endif %}\n        {% endfor -%}\n        )\n\n    {% endfor %}\n\n\n\n    {% else %}\n        {% for source in sources %}\n            {{ stage('MERGE ' + source.name | string ) }}\n            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} \"TGT\"\n            USING (\n                SELECT\n                {% for col in source.columns if not col.isSurrogateKey %}\n                    {% if col.isSystemVersion %}\n                    \t1\n                    {% elif col.isSystemCurrentFlag %}\n                    \t'Y'\n                    {% else %}\n                        {{ get_source_transform(col) }}\n                    {% endif %}\n                    AS \"{{ col.name }}\"\n                    {%- if not loop.last %}, {% endif %}\n                {% endfor %}\n                {{ source.join }})\n                AS \"SRC\"\n            ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                \"SRC\".\"{{ col.name }}\" = \"TGT\".\"{{ col.name }}\"\n            {% endfor %}\n            WHEN MATCHED\n            {% for col in source.columns if not (   col.isBusinessKey or\n                                                    col.isSurrogateKey or\n                                                    col.isSystemVersion or\n                                                    col.isSystemCurrentFlag or\n                                                    col.isSystemStartDate or\n                                                    col.isSystemEndDate or\n                                                    col.isSystemUpdateDate or\n                                                    col.isSystemCreateDate) %}\n                {% if loop.first %}\n                    AND (\n                {% else %}\n                    OR\n                {% endif %}\n                NVL( CAST(\"SRC\".\"{{ col.name }}\" as STRING), '**NULL**') <> NVL( CAST(\"TGT\".\"{{ col.name }}\" as STRING), '**NULL**')\n                {% if loop.last %}\n                    )\n                {% endif %}\n            {% endfor %}\n            THEN UPDATE SET\n            {%- for col in source.columns if not (  col.isBusinessKey or\n                                                    col.isSurrogateKey or\n                                                    col.isSystemVersion or\n                                                    col.isSystemCurrentFlag or\n                                                    col.isSystemStartDate or\n                                                    col.isSystemEndDate or\n                                                    col.isSystemCreateDate) %}\n                    \"TGT\".\"{{ col.name }}\" = \"SRC\".\"{{ col.name }}\"\n                {% if not loop.last %}, {% endif %}\n            {% endfor %}\n            WHEN NOT MATCHED THEN\n            INSERT (\n            {%- for col in source.columns if not col.isSurrogateKey %}\n                \"{{ col.name }}\"\n                {% if not loop.last %}, {% endif %}\n            {% endfor -%}\n            )\n            VALUES (\n            {%- for col in source.columns if not col.isSurrogateKey %}\n                \"SRC\".\"{{ col.name }}\"\n                {% if not loop.last %}, {% endif %}\n            {% endfor -%}\n            )\n        {% endfor %}\n    {% endif %}\n\t\n\t{% if config.postSQL %}\t\t\t\n\t\t{{ stage('Post-SQL') }}\n\t\t{{ config.postSQL }}\n\t{% endif %}\n{% endif %}\n\n{% if config.testsEnabled %}\n\t{% for test in node.tests %}\n\t\t{% if test.runOrder == 'After' %}\n\t\t\t{{ test_stage(test.name, test.continueOnFailure) }}\n\t\t\t{{ test.templateString }}\n        {% endif %}\n\t{% endfor %}\n\n\t{% for column in columns %}\n\t\t{% for test in column.tests %}\n\t\t\t{{ test_stage(column.name + \": \" + test.name) }}\n\t\t\t{{ test.templateString }}\n\t\t{% endfor %}\n\t{% endfor %}\n{% endif %}\n"}}},"name":"Dimension","version":1},"Fact":{"id":"Fact","isDisabled":false,"metadata":{"defaultStorageLocation":null,"error":null,"nodeMetadataSpec":"capitalized: Fact\nplural: Facts\nshort: FCT\ntagColor: '#D9A438'\n\nconfig:\n- groupName: Options\n  items:\n  - type: materializationSelector\n    isRequired: true\n    options:\n    - table\n    - view\n  \n  - type: businessKeyColumns\n    isRequired: false\n\n  - displayName: Enable Tests\n    attributeName: testsEnabled\n    type: toggleButton\n    default: true\n    \n  - displayName: Pre-SQL\n    attributeName: preSQL\n    type: textBox\n    syntax: sql\n    isRequired: false\n\n  - displayName: Post-SQL\n    attributeName: postSQL\n    type: textBox\n    syntax: sql\n    isRequired: false\n\nsystemColumns:\n- displayName: SYSTEM_CREATE_DATE\n  transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)\n  dataType: TIMESTAMP\n  placement: end\n  attributeName: isSystemCreateDate\n\n- displayName: SYSTEM_UPDATE_DATE\n  transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)\n  dataType: TIMESTAMP\n  placement: end\n  attributeName: isSystemUpdateDate\n","templates":{"create":{"templateString":"\n    {% if node.materializationType == 'table' %}\n        {{ stage('Create Fact Table') }}\n    \n        CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}\n        (\n            {% for col in columns %}\n                \"{{ col.name }}\" {{ col.dataType }}\n                {%- if not col.nullable %} NOT NULL\n                    {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}\n                {% endif %}\n                {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n                {%- if not loop.last -%}, {% endif %}\n            {% endfor %}\n        )\n        {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n    \n    \n    {% elif node.materializationType == 'view' %}\n        {{ stage('Create Fact View') }}\n    \n        CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}\n        (\n            {% for col in columns %}\n                \"{{ col.name }}\"\n                {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n                {%- if not loop.last -%},{% endif %}\n            {% endfor %}\n        )\n        {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n        AS\n        {% for source in sources %}\n    \n            {% if loop.first %}SELECT {% endif %}\n    \n            {% for col in source.columns %}\n                {{ get_source_transform(col) }} AS \"{{ col.name }}\"\n                {%- if not loop.last -%}, {% endif %}\n            {% endfor %}\n            {{ source.join }}\n    \n            {% if not loop.last %} UNION ALL {% endif %}\n        {% endfor %}\n    \n    {% endif %}\n    "},"run":{"templateString":"\n    {% for test in node.tests if config.testsEnabled %}\n        {% if test.runOrder == 'Before' %}\n            {{ test_stage(test.name, test.continueOnFailure) }}\n            {{ test.templateString }}\n        {% endif %}\n    {% endfor %}\n\n    {% if node.materializationType == 'table' %}\n        {% if config.preSQL %}\n            {{ stage('Pre-SQL') }}\n            {{ config.preSQL }}\n        {% endif %}\n        \n        {% set has_business_key = columns | selectattr(\"isBusinessKey\") | list | length > 0 %}\n        \n        {% for source in sources %}\n        \n            {% if has_business_key %}\n        \n                {{ stage('MERGE ' + source.name | string ) }}\n                MERGE INTO {{ ref_no_link(node.location.name, node.name) }} \"TGT\"\n                USING (\n                    SELECT\n                    {% for col in source.columns %}\n                        {{ get_source_transform(col) }} AS \"{{ col.name }}\"\n                        {%- if not loop.last %}, {% endif %}\n                    {% endfor %}\n                    {{ source.join }})\n                    AS \"SRC\"\n                ON\n                {% for col in source.columns if col.isBusinessKey -%}\n                    {% if not loop.first %}\n                        AND\n                    {% endif %}\n                    \"SRC\".\"{{ col.name }}\" = \"TGT\".\"{{ col.name }}\"\n                {% endfor %}\n                WHEN MATCHED\n                {% for col in source.columns if not (   col.isBusinessKey or\n                                                        col.isSystemUpdateDate or\n                                                        col.isSystemCreateDate) %}\n                    {% if loop.first %}\n                        AND (\n                    {% else %}\n                        OR\n                    {% endif %}\n                    NVL( CAST(\"SRC\".\"{{ col.name }}\" as STRING), '**NULL**') <> NVL( CAST(\"TGT\".\"{{ col.name }}\" as STRING), '**NULL**')\n                    {% if loop.last %}\n                        )\n                    {% endif %}\n                {% endfor %}\n                THEN UPDATE SET\n                {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}\n                        \"TGT\".\"{{ col.name }}\" = \"SRC\".\"{{ col.name }}\"\n                    {% if not loop.last %}, {% endif %}\n                {% endfor %}\n                WHEN NOT MATCHED THEN\n                INSERT (\n                {%- for col in source.columns if not col.isSurrogateKey %}\n                    \"{{ col.name }}\"\n                    {% if not loop.last %}, {% endif %}\n                {% endfor -%}\n                )\n                VALUES (\n                {%- for col in source.columns if not col.isSurrogateKey %}\n                    \"SRC\".\"{{ col.name }}\"\n                    {% if not loop.last %}, {% endif %}\n                {% endfor -%}\n                )\n        \n            {% else %}\n        \n                {{ stage('Insert ' + source.name | string ) }}\n        \n                    INSERT INTO {{ ref_no_link(node.location.name, node.name) }}\n                    (\n                        {% for col in source.columns %}\n                            \"{{ col.name }}\"\n                            {%- if not loop.last -%},{% endif %}\n                        {% endfor %}\n                    )\n        \n                    SELECT\n                    {% for col in source.columns %}\n                        {{ get_source_transform(col) }} AS \"{{ col.name }}\"\n                        {%- if not loop.last -%}, {% endif %}\n                    {% endfor %}\n                    {{ source.join }}\n            {% endif %}\n        {% endfor %}\n        {% if config.postSQL %}\n            {{ stage('Post-SQL') }}\n            {{ config.postSQL }}\n        {% endif %}\n    {% endif %}\n\n    {% if config.testsEnabled %}\n        {% for test in node.tests %}\n            {% if test.runOrder == 'After' %}\n                {{ test_stage(test.name, test.continueOnFailure) }}\n                {{ test.templateString }}\n            {% endif %}\n        {% endfor %}\n\n        {% for column in columns %}\n            {% for test in column.tests %}\n                {{ test_stage(column.name + \": \" + test.name) }}\n                {{ test.templateString }}\n            {% endfor %}\n        {% endfor %}\n    {% endif %}\n    \n    "}}},"name":"Fact","version":1},"Hub":{"id":"Hub","isDisabled":false,"metadata":{"defaultStorageLocation":null,"error":null,"nodeMetadataSpec":"capitalized: Hub\nshort: 'HUB'\nplural: 'Hubs'\n\ntagColor: '#92712E'\n\nconfig:\n- groupName: Options\n  items:\n  - type: materializationSelector\n    isRequired: true\n    options: \n    - table\n    default: table\n\n  - displayName: Multi Source Strategy\n    attributeName: insertStrategy\n    type: dropdownSelector\n    default: UNION\n    options:\n    - \"UNION\"\n    - \"UNION ALL\"\n    isRequired: true\n    enableIf: \"{% if node.isMultisource %} true {% else %} false {% endif %}\"\n\n  - displayName: Enable Tests\n    attributeName: testsEnabled\n    type: toggleButton\n    default: true\n    \n  - displayName: Pre-SQL\n    attributeName: preSQL\n    type: textBox\n    syntax: sql\n    isRequired: false\n\n  - displayName: Post-SQL\n    attributeName: postSQL\n    type: textBox\n    syntax: sql\n    isRequired: false\n\nsystemColumns:\n- displayName: \"LOAD_DATE\"\n  transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)\n  dataType: TIMESTAMP\n  placement: end\n  attributeName: isSystemCreateDate\n\n- displayName: \"RECORD_SOURCE\"\n  transform: \"''\"\n  dataType: VARCHAR\n  placement: end\n  attributeName: isSystemRecordSource","templates":{"create":{"templateString":"{% if node.materializationType == 'table' %}\n\t\t\t\t{{ stage('Create Hub Table') }}\n\t\t\t\n\t\t\t\tCREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}\n\t\t\t\t(\n\t\t\t\t\t{% for col in columns %}\n\t\t\t\t\t\t\"{{ col.name }}\" {{ col.dataType }}\n\t\t\t\t\t\t{%- if not col.nullable %} NOT NULL\n\t\t\t\t\t\t\t{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}\n\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n\t\t\t\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t\t\t\t{% endfor %}\n\t\t\t\t)\n\t\t\t\t{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n\t\t\t\n\t\t\t{% endif %}"},"run":{"templateString":"\n    {% for test in node.tests if config.testsEnabled %}\n        {% if test.runOrder == 'Before' %}\n            {{ test_stage(test.name, test.continueOnFailure) }}\n            {{ test.templateString }}\n        {% endif %}\n    {% endfor %}\n\n{% if node.materializationType == 'table' %}\n\t{% if config.preSQL %}\n\t\t{{ stage('Pre-SQL') }}\n\t\t{{ config.preSQL }}\n\t{% endif %}\n\n\n\t{{ stage('Merge Hub') }}\n\tMERGE INTO {{ ref_no_link(node.location.name, node.name) }} \"TGT\" USING\n\t(\n\t\t{% for source in sources %}\n\t\tSELECT\n\t\t{% for col in source.columns %}\n            {{ get_source_transform(col) }} AS \"{{ col.name }}\"\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\n\t\t{{ source.join }}\n\n\t\t{% if not loop.last %}\n\t\t\t{{ config.insertStrategy }}\n\t\t{% endif %}\n\t{% endfor %}\n\t)\n\tAS \"SRC\"\n\tON\n\t{% for col in sources[0].columns if (col.sourceColumns[0] \n                                        and col.sourceColumns[0].column \n                                        and col.sourceColumns[0].column.isHubHash\n                                        ) -%}\n\t\t{% if not loop.first %}\n\t\t\tAND\n\t\t{% endif %}\n\t\t\"SRC\".\"{{ col.name }}\" = \"TGT\".\"{{ col.name }}\"\n\t{% endfor %}\n\tWHEN NOT MATCHED THEN\n\tINSERT\n\t(\n\t\t{% for col in columns %}\n\t\t\t\"{{ col.name }}\"\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\t) VALUES\n\t(\n\t\t{% for col in columns %}\n\t\t\t\"SRC\".\"{{ col.name }}\"\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\t)\n\n\n\t{% if config.postSQL %}\n\t\t{{ stage('Post-SQL') }}\n\t\t{{ config.postSQL }}\n\t{% endif %}\n\t\n{% endif %}\n\n{% if config.testsEnabled %}\n\t{% for test in node.tests %}\n\t\t{% if test.runOrder == 'After' %}\n\t\t\t{{ test_stage(test.name, test.continueOnFailure) }}\n\t\t\t{{ test.templateString }}\n        {% endif %}\n\t{% endfor %}\n\n\t{% for column in columns %}\n\t\t{% for test in column.tests %}\n\t\t\t{{ test_stage(column.name + \": \" + test.name) }}\n\t\t\t{{ test.templateString }}\n\t\t{% endfor %}\n\t{% endfor %}\n{% endif %}\n\t\t\t"}}},"name":"Hub","version":1},"Link":{"id":"Link","isDisabled":false,"metadata":{"defaultStorageLocation":null,"error":null,"nodeMetadataSpec":"capitalized: Link\nshort: 'LNK'\nplural: 'Links'\ntagColor: '#CA2287'\n\nconfig:\n- groupName: Options\n  items:\n  - type: materializationSelector\n    isRequired: true\n    default: table\n    options:\n    - table\n\n  - displayName: Multi Source Strategy\n    attributeName: insertStrategy\n    type: dropdownSelector\n    default: UNION\n    options:\n    - \"UNION\"\n    - \"UNION ALL\"\n    isRequired: true\n    enableIf: \"{% if node.isMultisource %} true {% else %} false {% endif %}\"\n\n  - displayName: Enable Tests\n    attributeName: testsEnabled\n    type: toggleButton\n    default: true\n    \n  - displayName: Pre-SQL\n    attributeName: preSQL\n    type: textBox\n    syntax: sql\n    isRequired: false\n\n  - displayName: Post-SQL\n    attributeName: postSQL\n    type: textBox\n    syntax: sql\n    isRequired: false\n\nsystemColumns:\n- displayName: \"LOAD_DATE\"\n  transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)\n  dataType: TIMESTAMP\n  placement: end\n  attributeName: isSystemCreateDate\n\n- displayName: \"RECORD_SOURCE\"\n  transform: \"''\"\n  dataType: VARCHAR\n  placement: end\n  attributeName: isSystemRecordSource","templates":{"create":{"templateString":"{% if node.materializationType == 'table' %}\n\t\t\t\t{{ stage('Create Link Table') }}\n\t\t\t\n\t\t\t\tCREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}\n\t\t\t\t(\n\t\t\t\t\t{% for col in columns %}\n\t\t\t\t\t\t\"{{ col.name }}\" {{ col.dataType }}\n\t\t\t\t\t\t{%- if not col.nullable %} NOT NULL\n\t\t\t\t\t\t\t{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}\n\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n\t\t\t\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t\t\t\t{% endfor %}\n\t\t\t\t)\n\t\t\t\t{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n\t\t\t\n\t\t\t{% endif %}"},"run":{"templateString":"\n    {% for test in node.tests if config.testsEnabled %}\n        {% if test.runOrder == 'Before' %}\n            {{ test_stage(test.name, test.continueOnFailure) }}\n            {{ test.templateString }}\n        {% endif %}\n    {% endfor %}\n\n{% if node.materializationType == 'table' %}\n\t{% if config.preSQL %}\n\t\t{{ stage('Pre-SQL') }}\n\t\t{{ config.preSQL }}\n\t\n\t{% endif %}\n\n\t\t\t\n\t{{ stage('Merge Link') }}\n\tMERGE INTO {{ ref_no_link(node.location.name, node.name) }} \"TGT\" USING\n\t(\n\t\t{% for source in sources %}\n\t\tSELECT\n\t\t{% for col in source.columns %}\n            {{ get_source_transform(col) }} AS \"{{ col.name }}\"\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\n\t\t{{ source.join }}\n\n\t\t{% if not loop.last %}\n\t\t\t{{ config.insertStrategy }}\n\t\t{% endif %}\n\t{% endfor %}\n\t)\n\tAS \"SRC\"\n\tON\n\t{% for col in sources[0].columns if (col.sourceColumns[0] \n                                        and col.sourceColumns[0].column \n                                        and col.sourceColumns[0].column.isLinkHash\n                                        ) -%}\n\t\t{% if not loop.first %}\n\t\t\tAND\n\t\t{% endif %}\n\t\t\"SRC\".\"{{ col.name }}\" = \"TGT\".\"{{ col.name }}\"\n\t{% endfor %}\n\tWHEN NOT MATCHED THEN\n\tINSERT\n\t(\n\t\t{% for col in columns %}\n\t\t\t\"{{ col.name }}\"\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\t) VALUES\n\t(\n\t\t{% for col in columns %}\n\t\t\t\"SRC\".\"{{ col.name }}\"\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\t)\n\n\t{% if config.postSQL %}\n\t\t{{ stage('Post-SQL') }}\n\t\t{{ config.postSQL }}\t\n\t{% endif %}\n{% endif %}\n\n{% if config.testsEnabled %}\n\t{% for test in node.tests %}\n\t\t{% if test.runOrder == 'After' %}\n\t\t\t{{ test_stage(test.name, test.continueOnFailure) }}\n\t\t\t{{ test.templateString }}\n        {% endif %}\n\t{% endfor %}\n\n\t{% for column in columns %}\n\t\t{% for test in column.tests %}\n\t\t\t{{ test_stage(column.name + \": \" + test.name) }}\n\t\t\t{{ test.templateString }}\n\t\t{% endfor %}\n\t{% endfor %}\n{% endif %}\n\t\t\t"}}},"name":"Link","version":1},"Satellite":{"id":"Satellite","isDisabled":false,"metadata":{"defaultStorageLocation":null,"error":null,"nodeMetadataSpec":"capitalized: Satellite\nshort: 'SAT'\nplural: 'Satellites'\ntagColor: '#627DE9'\n\nconfig:\n- groupName: Options\n  items:\n  - type: materializationSelector\n    isRequired: true\n    default: table\n    options:\n    - table\n\n  - displayName: Multi Source Strategy\n    attributeName: insertStrategy\n    type: dropdownSelector\n    default: UNION\n    options:\n    - \"UNION\"\n    - \"UNION ALL\"\n    isRequired: true\n    enableIf: \"{% if node.isMultisource %} true {% else %} false {% endif %}\"\n\n  - displayName: Enable Tests\n    attributeName: testsEnabled\n    type: toggleButton\n    default: true\n    \n  - displayName: Pre-SQL\n    attributeName: preSQL\n    type: textBox\n    syntax: sql\n    isRequired: false\n\n  - displayName: Post-SQL\n    attributeName: postSQL\n    type: textBox\n    syntax: sql\n    isRequired: false\n\nsystemColumns:\n- displayName: \"LOAD_DATE\"\n  transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)\n  dataType: TIMESTAMP\n  placement: end\n  attributeName: isSystemCreateDate\n\n- displayName: \"RECORD_SOURCE\"\n  transform: \"''\"\n  dataType: VARCHAR\n  placement: end\n  attributeName: isSystemRecordSource","templates":{"create":{"templateString":"{% if node.materializationType == 'table' %}\n\t\t\t\t{{ stage('Create Satellite Table') }}\n\t\t\t\n\t\t\t\tCREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}\n\t\t\t\t(\n\t\t\t\t\t{% for col in columns %}\n\t\t\t\t\t\t\"{{ col.name }}\" {{ col.dataType }}\n\t\t\t\t\t\t{%- if not col.nullable %} NOT NULL\n\t\t\t\t\t\t\t{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}\n\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n\t\t\t\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t\t\t\t{% endfor %}\n\t\t\t\t)\n\t\t\t\t{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n\t\t\t\n\t\t\t{% endif %}"},"run":{"templateString":"\n    {% for test in node.tests if config.testsEnabled %}\n        {% if test.runOrder == 'Before' %}\n            {{ test_stage(test.name, test.continueOnFailure) }}\n            {{ test.templateString }}\n        {% endif %}\n    {% endfor %}\n\n{% if node.materializationType == 'table' %}\n\t\t{% if config.preSQL %}\n\t\t\t{{ stage('Pre-SQL') }}\n\t\t\t{{ config.preSQL }}\n\t\t{% endif %}\n\t\n\t\t{{ stage('Merge Satellite') }}\n\t\tMERGE INTO {{ ref_no_link(node.location.name, node.name) }} \"TGT\" USING\n\t\t(\n\t\t\t{% for source in sources %}\n\t\t\tSELECT\n\t\t\t{% for col in source.columns %}\n                {{ get_source_transform(col) }} AS \"{{ col.name }}\"\n\t\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t\t{% endfor %}\n\t\n\t\t\t{{ source.join }}\n\t\n\t\t\t{% if not loop.last %}\n\t\t\t\t{{ config.insertStrategy }}\n\t\t\t{% endif %}\n\t\t{% endfor %}\n\t\t)\n\t\tAS \"SRC\"\n\t\tON\n\t\t{% for col in sources[0].columns if (col.sourceColumns[0] \n                                            and col.sourceColumns[0].column \n                                            and col.sourceColumns[0].column.isChangeHash\n                                            ) -%}\n\t\t\t{% if not loop.first %}\n\t\t\t\tAND\n\t\t\t{% endif %}\n\t\t\t\"SRC\".\"{{ col.name }}\" = \"TGT\".\"{{ col.name }}\"\n\t\t{% endfor %}\n\t\tWHEN NOT MATCHED THEN\n\t\tINSERT\n\t\t(\n\t\t\t{% for col in columns %}\n\t\t\t\t\"{{ col.name }}\"\n\t\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t\t{% endfor %}\n\t\t) VALUES\n\t\t(\n\t\t\t{% for col in columns %}\n\t\t\t\t\"SRC\".\"{{ col.name }}\"\n\t\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t\t{% endfor %}\n\t\t)\n\t\n\t{% if config.postSQL %}\n\t\t{{ stage('Post-SQL') }}\n\t\t{{ config.postSQL }}\t\n\t{% endif %}\n\t\n{% endif %}\n\n{% if config.testsEnabled %}\n\t{% for test in node.tests %}\n\t\t{% if test.runOrder == 'After' %}\n\t\t\t{{ test_stage(test.name, test.continueOnFailure) }}\n\t\t\t{{ test.templateString }}\n        {% endif %}\n\t{% endfor %}\n\n\t{% for column in columns %}\n\t\t{% for test in column.tests %}\n\t\t\t{{ test_stage(column.name + \": \" + test.name) }}\n\t\t\t{{ test.templateString }}\n\t\t{% endfor %}\n\t{% endfor %}\n{% endif %}\n\t\t\t"}}},"name":"Satellite","version":1},"Source":{"id":"Source","isDisabled":false,"metadata":{"defaultStorageLocation":null,"error":null,"nodeMetadataSpec":"capitalized: Source\nshort: null\ntagColor: '#D26000'\nplural: Sources","templates":{"create":{"templateString":"{{ stage('Validating Source Exists') }}\nSELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0\n"},"run":{"templateString":"{{ stage('Validating Source Exists') }}\nSELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0\n"}}},"name":"Source","version":1},"Stage":{"id":"Stage","isDisabled":false,"metadata":{"defaultStorageLocation":null,"error":null,"nodeMetadataSpec":"capitalized: Stage\nshort: STG\nplural: Stages\ntagColor: '#2EB67D'\n\nconfig:\n- groupName: Options\n  items:\n  - type: materializationSelector\n    default: table\n    options:\n    - table\n    - view\n    isRequired: true\n\n  - type: multisourceToggle\n    enableIf: \"{% if node.materializationType == 'table' %} true {% else %} false {% endif %}\" \n\n  - type: overrideSQLToggle\n    enableIf: \"{% if node.materializationType == 'view' %} true {% else %} false {% endif %}\"\n    \n  - displayName: Multi Source Strategy\n    attributeName: insertStrategy\n    type: dropdownSelector\n    default: INSERT\n    options:\n    - \"INSERT\"\n    - \"UNION\"\n    - \"UNION ALL\"\n    isRequired: true\n    enableIf: \"{% if node.isMultisource %} true {% else %} false {% endif %}\"\n\n  - displayName: Truncate Before\n    attributeName: truncateBefore\n    type: toggleButton\n    default: true\n\n  - displayName: Enable Tests\n    attributeName: testsEnabled\n    type: toggleButton\n    default: true\n    \n  - displayName: Pre-SQL\n    attributeName: preSQL\n    type: textBox\n    syntax: sql\n    isRequired: false\n\n  - displayName: Post-SQL\n    attributeName: postSQL\n    type: textBox\n    syntax: sql\n    isRequired: false\n","templates":{"create":{"templateString":"{% if node.override.create.enabled %}\n\t\n\t{{ node.override.create.script }}\n\n{% elif node.materializationType == 'table' %}\n\t{{ stage('Create Stage Table') }}\n\n\tCREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}\n\t(\n\t\t{% for col in columns %}\n\t\t\t\"{{ col.name }}\" {{ col.dataType }}\n\t\t\t{%- if not col.nullable %} NOT NULL\n\t\t\t\t{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}\n\t\t\t{% endif %}\n\t\t\t{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\t)\n\t{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n\n\n{% elif node.materializationType == 'view' %}\n    {{ stage('Create Stage View') }}\n\n    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}\n    (\n        {% for col in columns %}\n            \"{{ col.name }}\"\n            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n            {%- if not loop.last -%}, {% endif %}\n        {% endfor %}\n    )\n    {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n    AS\n    {% for source in sources %}\n        SELECT\n        {% for col in source.columns %}\n            {{ get_source_transform(col) }} AS \"{{ col.name }}\"\n            {%- if not loop.last -%}, {% endif %}\n        {% endfor %}\n\n        {{ source.join }}\n\n        {% if not loop.last %}\n            {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}\n                {{ config.insertStrategy }}\n            {% else %}\n                UNION\n            {% endif %}\n        {% endif %}\n    {% endfor %}\n\n{% endif %}\n"},"run":{"templateString":"\n    {% for test in node.tests if config.testsEnabled %}\n        {% if test.runOrder == 'Before' %}\n            {{ test_stage(test.name, test.continueOnFailure) }}\n            {{ test.templateString }}\n        {% endif %}\n    {% endfor %}\n\n{% if node.materializationType == 'table' %}\n\t{% if config.preSQL %}\n\t\t{{ stage('Pre-SQL') }}\n\t\t{{ config.preSQL }}\n\t{% endif %}\n\t\n\t\n\t\n\t\t{% if config.truncateBefore %}\n\t\n\t\t\t{{ stage('Truncate Stage Table') }}\n\t\t\tTRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}\n\t\n\t\t{% endif %}\n\t\n\t\n\t\t{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}\n\t\t\t{{ stage( config.insertStrategy + ' Sources' | string ) }}\n\t\t\tINSERT INTO {{ ref_no_link(node.location.name, node.name) }}\n\t\t\t\t(\n\t\t\t\t\t{% for col in columns %}\n\t\t\t\t\t\t\"{{ col.name }}\"\n\t\t\t\t\t\t{%- if not loop.last -%},{% endif %}\n\t\t\t\t\t{% endfor %}\n\t\t\t\t)\n\t\t{% endif %}\n\t\n\t\n\t\t{% for source in sources %}\n\t\n\t\t\t{% if config.insertStrategy == 'INSERT' %}\n\t\t\t\t{{ stage('Insert ' + source.name | string ) }}\n\t\n\t\t\t\tINSERT INTO {{ ref_no_link(node.location.name, node.name) }}\n\t\t\t\t(\n\t\t\t\t\t{% for col in source.columns %}\n\t\t\t\t\t\t\"{{ col.name }}\"\n\t\t\t\t\t\t{%- if not loop.last -%},{% endif %}\n\t\t\t\t\t{% endfor %}\n\t\t\t\t)\n\t\t\t{% endif %}\n\t\n\t\t\tSELECT\n\t\t\t{% for col in source.columns %}\n                {{ get_source_transform(col) }} AS \"{{ col.name }}\"\n\t\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t\t{% endfor %}\n\t\n\t\t\t{{ source.join }}\n\t\n\t\t\t{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}\n\t\t\t\t{{config.insertStrategy}}\n\t\t\t{% endif %}\n\t\n\t\t{% endfor %}\n\t\n\t{% if config.postSQL %}\n\t\t{{ stage('Post-SQL') }}\n\t\t{{ config.postSQL }}\n\t{% endif %}\n{% endif %}\n\n{% if config.testsEnabled %}\n\t{% for test in node.tests %}\n\t\t{% if test.runOrder == 'After' %}\n\t\t\t{{ test_stage(test.name, test.continueOnFailure) }}\n\t\t\t{{ test.templateString }}\n        {% endif %}\n\t{% endfor %}\n\n\t{% for column in columns %}\n\t\t{% for test in column.tests %}\n\t\t\t{{ test_stage(column.name + \": \" + test.name) }}\n\t\t\t{{ test.templateString }}\n\t\t{% endfor %}\n\t{% endfor %}\n{% endif %}\n"}}},"name":"Stage","version":1},"View":{"id":"View","isDisabled":false,"metadata":{"defaultStorageLocation":null,"error":null,"nodeMetadataSpec":"capitalized: View\nshort: V\ntagColor: '#C4C4C4'\nisDisabled: true\nplural: Views\n\nconfig:\n  - groupName: Options\n    items: \n    - type: materializationSelector\n      options:\n        - view\n      default: view\n      isRequired: true\n\n    - type: toggleButton\n      attributeName: selectDistinct\n      displayName: Distinct\n\n    - type: multisourceToggle\n\n    - type: overrideSQLToggle\n\n    - displayName: Multi Source Strategy\n      attributeName: insertStrategy\n      type: dropdownSelector\n      default: UNION\n      options:\n      - \"UNION\"\n      - \"UNION ALL\" \n      isRequired: true\n      enableIf: \"{% if node.isMultisource %} true {% else %} false {% endif %}\"\n","templates":{"create":{"templateString":"{% if node.override.create.enabled %}\n    \n    {{ node.override.create.script }}\n\n{% else %}\n    {{ stage('Create View') }}\n    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}\n    (\n        {% for col in columns %}\n            \"{{ col.name }}\"\n            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n            {%- if not loop.last -%}, {% endif %}\n        {% endfor %}\n    )\n    {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n    AS\n    {% for source in sources %}\n        SELECT {% if config.selectDistinct %} DISTINCT {% endif %}\n        {% for col in source.columns %}\n            {{ get_source_transform(col) }} AS \"{{ col.name }}\"\n            {%- if not loop.last -%}, {% endif %}\n        {% endfor %}\n\n        {{ source.join }}\n\n        {% if not loop.last %}\n            {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}\n                {{ config.insertStrategy }}\n            {% else %}\n                UNION\n            {% endif %}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n"},"run":{"templateString":""}}},"name":"View","version":1},"persistentStage":{"id":"persistentStage","isDisabled":false,"metadata":{"defaultStorageLocation":null,"error":null,"nodeMetadataSpec":"capitalized: Persistent Stage\nshort: PSTG\nplural: Persistent Stages\ntagColor: '#29B2DB'\n    \nconfig:\n- groupName: Options\n  items:\n  - type: materializationSelector\n    isRequired: true\n    default: table\n    options:\n    - table\n    - view\n  \n  - type: businessKeyColumns\n    isRequired: false\n\n  - type: multisourceToggle\n    enableIf: \"{% if node.materializationType == 'table' %} true {% else %} false {% endif %}\"\n\n  - type: overrideSQLToggle\n    enableIf: \"{% if node.materializationType == 'view' %} true {% else %} false {% endif %}\"\n\n  - displayName: Enable Tests\n    attributeName: testsEnabled\n    type: toggleButton\n    default: true\n    \n  - displayName: Pre-SQL\n    attributeName: preSQL\n    type: textBox\n    syntax: sql\n    isRequired: false\n\n  - displayName: Post-SQL\n    attributeName: postSQL\n    type: textBox\n    syntax: sql\n    isRequired: false\n\nsystemColumns:\n\n- displayName: '{{NODE_NAME}}_KEY'\n  transform: ''\n  dataType: NUMBER\n  placement: beginning\n  attributeName: isSurrogateKey\n\n- displayName: SYSTEM_VERSION\n  transform: ''\n  dataType: NUMBER\n  placement: end\n  attributeName: isSystemVersion\n\n- displayName: SYSTEM_CURRENT_FLAG\n  transform: ''\n  dataType: VARCHAR\n  placement: end\n  attributeName: isSystemCurrentFlag\n\n- displayName: SYSTEM_START_DATE\n  transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)\n  dataType: TIMESTAMP\n  placement: end\n  attributeName: isSystemStartDate\n\n- displayName: SYSTEM_END_DATE\n  transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)\n  dataType: TIMESTAMP\n  placement: end\n  attributeName: isSystemEndDate\n\n- displayName: SYSTEM_CREATE_DATE\n  transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)\n  dataType: TIMESTAMP\n  placement: end\n  attributeName: isSystemCreateDate\n\n- displayName: SYSTEM_UPDATE_DATE\n  transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)\n  dataType: TIMESTAMP\n  placement: end\n  attributeName: isSystemUpdateDate\n","templates":{"create":{"templateString":"{% if node.materializationType == 'table' %}\n    {{ stage('Create Persistent Stage Table') }}\n\n    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}\n    (\n        {% for col in columns %}\n            \"{{ col.name }}\" {{ col.dataType }}\n            {% if col.isSurrogateKey %}\n\t\t        identity\n            {% endif %}\n            {%- if not col.nullable %} NOT NULL\n                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}\n            {% endif %}\n            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n            {%- if not loop.last -%}, {% endif %}\n        {% endfor %}\n    )\n    {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n\n\n{% elif node.materializationType == 'view' %}\n    {{ stage('Create Persistent Stage View') }}\n\n    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}\n    (\n        {% for col in columns %}\n            \"{{ col.name }}\"\n            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n            {%- if not loop.last -%},{% endif %}\n        {% endfor %}\n    )\n    {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n    AS\n    {% for source in sources %}\n\n\t\t{% if not loop.last %} UNION ALL {% endif %}\n\t{% endfor %}\n\n        {% for col in source.columns %}\n            {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}\n                NULL\n            {% else %}\n                {{ get_source_transform(col) }}\n            {% endif %}\n            AS \"{{ col.name }}\"\n            {%- if not loop.last -%}, {% endif %}\n        {% endfor %}\n        {{ source.join }}\n\n{% endif %}\n"},"run":{"templateString":"\n{% set has_business_key = columns | selectattr(\"isBusinessKey\") | list | length > 0 %}\n{% set is_type_2 = columns | selectattr(\"isChangeTracking\") | list | length > 0 %}\n\n    {% for test in node.tests if config.testsEnabled %}\n        {% if test.runOrder == 'Before' %}\n            {{ test_stage(test.name, test.continueOnFailure) }}\n            {{ test.templateString }}\n        {% endif %}\n    {% endfor %}\n\n{% if node.materializationType == 'table' %}\n\t{% if config.preSQL %}\n\t\t{{ stage('Pre-SQL') }}\n\t\t{{ config.preSQL }}\n\t{% endif %}\n\t\n    {% if has_business_key and is_type_2 %}\n\n        {% for source in sources %}\n            {{ stage('MERGE ' + source.name | string) }}\n            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} \"TGT\"\n            USING (\n            /* New Rows That Don't Exist */\n            SELECT\n            {% for col in source.columns if not col.isSurrogateKey %}\n                {% if col.isSystemVersion %}\n                    1\n                {% elif col.isSystemCurrentFlag %}\n                    'Y'\n                {% else %}\n                   {{ get_source_transform(col) }}\n                {% endif %}\n                AS \"{{ col.name }}\",\n            {% endfor %}\n                'INSERT_INITAL_VERSION_ROWS' AS \"DML_OPERATION\"\n            {{ source.join }}\n            LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} \"DIM\" ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                    {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %}\n            WHERE\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                \"DIM\".\"{{ col.name }}\" IS NULL\n            {% endfor %}\n            UNION ALL\n            /* New Row Needing To Be Inserted Due To Type-2 Column Changes */\n            SELECT\n            {% for col in source.columns if not col.isSurrogateKey %}\n                {% if col.isSystemVersion %}\n                    \"DIM\".\"{{ col.name }}\" + 1\n                {% elif col.isSystemCurrentFlag %}\n                    'Y'\n                {% else %}\n                   {{ get_source_transform(col) }}\n                {% endif %}\n                AS \"{{ col.name }}\",\n            {% endfor %}\n                'INSERT_NEW_VERSION_ROWS' AS \"DML_OPERATION\"\n            {{ source.join }}\n            INNER JOIN {{ ref_no_link(node.location.name, node.name) }} \"DIM\" ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %}\n            WHERE \"DIM\".\"{{ get_value_by_column_attribute(\"isSystemCurrentFlag\") }}\" = 'Y'\n            {% for col in source.columns if (col.isChangeTracking == true) %}\n                {% if loop.first %}\n                    AND (\n                {% else %}\n                    OR\n                {% endif %}\n                ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST(\"DIM\".\"{{ col.name }}\" as STRING), '**NULL**') )\n                {% if loop.last %}\n                    )\n                {% endif %}\n            {% endfor %}\n            UNION ALL\n            /* Rows Needing To Be Expired Due To Type-2 Column Changes\n            In this case, only two columns are merged (version and end date) */\n            SELECT\n            {%- for col in source.columns if not col.isSurrogateKey %}\n                {% if col.isSystemEndDate %}\n                    DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))\n                {% elif col.isSystemCurrentFlag %}\n                    'N'\n                {% else %}\n                    \"DIM\".\"{{ col.name }}\"\n                {% endif %}\n                AS \"{{ col.name }}\",\n            {% endfor -%}\n                'update_expired_version_rows' AS \"DML_OPERATION\"\n            {{ source.join }}\n            INNER JOIN {{ ref_no_link(node.location.name, node.name) }} \"DIM\" ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %}\n            WHERE \"DIM\".\"{{ get_value_by_column_attribute(\"isSystemCurrentFlag\") }}\" = 'Y'\n            {% for col in source.columns if (col.isChangeTracking == true) %}\n                {% if loop.first %}\n                    AND (\n                {% else %}\n                    OR\n                {% endif %}\n                ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST(\"DIM\".\"{{ col.name }}\" as STRING), '**NULL**') )\n                {% if loop.last %}\n                    )\n                {% endif %}\n            {% endfor %}\n            UNION ALL\n            /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns\n            This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/\n            SELECT\n            {%- for col in source.columns if not col.isSurrogateKey %}\n                {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}\n                    \"DIM\".\"{{ col.name }}\"\n                {% elif col.isSystemCurrentFlag %}\n                    'Y'\n                {% else %}\n                    {{ get_source_transform(col) }}\n                {% endif %}\n                AS \"{{ col.name }}\",\n            {% endfor -%}\n                'UPDATE_NON_TYPE2_ROWS' AS \"DML_OPERATION\"\n            {{ source.join }}\n            INNER JOIN {{ ref_no_link(node.location.name, node.name) }} \"DIM\" ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %}\n            WHERE \"DIM\".\"{{ get_value_by_column_attribute(\"isSystemCurrentFlag\") }}\" = 'Y'\n            AND (\n            {% for col in source.columns if (col.isChangeTracking) -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %} )\n            {% for col in source.columns if not (   col.isBusinessKey or\n                                                    col.isChangeTracking or\n                                                    col.isSurrogateKey or\n                                                    col.isSystemVersion or\n                                                    col.isSystemCurrentFlag or\n                                                    col.isSystemStartDate or\n                                                    col.isSystemEndDate or\n                                                    col.isSystemUpdateDate or\n                                                    col.isSystemCreateDate) -%}\n                {% if loop.first %}\n                    AND (\n                {% endif %}\n                {% if not loop.first %}\n                    OR\n                {% endif %}\n                NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST(\"DIM\".\"{{ col.name }}\" as STRING), '**NULL**')\n                {% if loop.last %}\n                    )\n                {% endif %}\n            {% endfor %}\n        ) AS \"SRC\"\n        ON\n        {% for col in source.columns if col.isBusinessKey -%}\n            {% if not loop.first %}\n                AND\n            {% endif %}\n            \"TGT\".\"{{ col.name }}\" = \"SRC\".\"{{ col.name }}\"\n        {% endfor %}\n        AND \"TGT\".\"{{ get_value_by_column_attribute(\"isSystemVersion\") }}\" = \"SRC\".\"{{ get_value_by_column_attribute(\"isSystemVersion\") }}\"\n        WHEN MATCHED THEN UPDATE SET\n        {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}\n            \"TGT\".\"{{ col.name }}\" = \"SRC\".\"{{ col.name }}\"\n            {% if not loop.last %}, {% endif %}\n        {% endfor -%}\n        WHEN NOT MATCHED THEN INSERT (\n        {%- for col in source.columns if not col.isSurrogateKey %}\n            \"{{ col.name }}\"\n            {% if not loop.last %}, {% endif %}\n        {% endfor -%}\n        )\n        VALUES (\n        {%- for col in source.columns if not col.isSurrogateKey %}\n            \"SRC\".\"{{ col.name }}\"\n            {% if not loop.last %}, {% endif %}\n        {% endfor -%}\n        )\n\n    {% endfor %}\n\n    {% elif has_business_key and not is_type_2 %}\n        {% for source in sources %}\n            {{ stage('MERGE ' + source.name | string ) }}\n            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} \"TGT\"\n            USING (\n                SELECT\n                {% for col in source.columns if not col.isSurrogateKey %}\n                    {% if col.isSystemVersion %}\n                    \t1\n                    {% elif col.isSystemCurrentFlag %}\n                    \t'Y'\n                    {% else %}\n                        {{ get_source_transform(col) }}\n                    {% endif %}\n                    AS \"{{ col.name }}\"\n                    {%- if not loop.last %}, {% endif %}\n                {% endfor %}\n                {{ source.join }})\n                AS \"SRC\"\n            ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                \"SRC\".\"{{ col.name }}\" = \"TGT\".\"{{ col.name }}\"\n            {% endfor %}\n            WHEN MATCHED\n            {% for col in source.columns if not (   col.isBusinessKey or\n                                                    col.isSurrogateKey or\n                                                    col.isSystemVersion or\n                                                    col.isSystemCurrentFlag or\n                                                    col.isSystemStartDate or\n                                                    col.isSystemEndDate or\n                                                    col.isSystemUpdateDate or\n                                                    col.isSystemCreateDate) %}\n                {% if loop.first %}\n                    AND (\n                {% else %}\n                    OR\n                {% endif %}\n                NVL( CAST(\"SRC\".\"{{ col.name }}\" as STRING), '**NULL**') <> NVL( CAST(\"TGT\".\"{{ col.name }}\" as STRING), '**NULL**')\n                {% if loop.last %}\n                    )\n                {% endif %}\n            {% endfor %}\n            THEN UPDATE SET\n            {%- for col in source.columns if not (  col.isBusinessKey or\n                                                    col.isSurrogateKey or\n                                                    col.isSystemVersion or\n                                                    col.isSystemCurrentFlag or\n                                                    col.isSystemStartDate or\n                                                    col.isSystemEndDate or\n                                                    col.isSystemCreateDate) %}\n                    \"TGT\".\"{{ col.name }}\" = \"SRC\".\"{{ col.name }}\"\n                {% if not loop.last %}, {% endif %}\n            {% endfor %}\n            WHEN NOT MATCHED THEN\n            INSERT (\n            {%- for col in source.columns if not col.isSurrogateKey %}\n                \"{{ col.name }}\"\n                {% if not loop.last %}, {% endif %}\n            {% endfor -%}\n            )\n            VALUES (\n            {%- for col in source.columns if not col.isSurrogateKey %}\n                \"SRC\".\"{{ col.name }}\"\n                {% if not loop.last %}, {% endif %}\n            {% endfor -%}\n            )\n        {% endfor %}\n    {% else %}\n        {% for source in sources %}\n            {{ stage('Insert ' + source.name | string ) }}\n            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}\n            (\n                {% for col in source.columns if not col.isSurrogateKey %}\n                    \"{{ col.name }}\"\n                    {%- if not loop.last -%},{% endif %}\n                {% endfor %}\n            )\n\n            SELECT\n            {% for col in source.columns if not col.isSurrogateKey %}\n\n                {% if col.isSystemVersion %}\n                    1\n                {% elif col.isSystemCurrentFlag %}\n                    'Y'\n                {% else %}\n                    {{ get_source_transform(col) }}\n                {% endif %}\n                AS \"{{ col.name }}\"\n                {%- if not loop.last -%}, {% endif %}\n                \n            {% endfor %}\n            {{ source.join }}\n        {% endfor %}            \n    {% endif %}\n\t\n\t{% if config.postSQL %}\n\t\t{{ stage('Post-SQL') }}\n\t\t{{ config.postSQL }}\n\t{% endif %}\n\t\n{% endif %}\n\n{% if config.testsEnabled %}\n\t{% for test in node.tests %}\n\t\t{% if test.runOrder == 'After' %}\n\t\t\t{{ test_stage(test.name, test.continueOnFailure) }}\n\t\t\t{{ test.templateString }}\n        {% endif %}\n\t{% endfor %}\n\n\t{% for column in columns %}\n\t\t{% for test in column.tests %}\n\t\t\t{{ test_stage(column.name + \": \" + test.name) }}\n\t\t\t{{ test.templateString }}\n\t\t{% endfor %}\n\t{% endfor %}\n{% endif %}"}}},"name":"Persistent Stage","version":1}},"locations":{"SOURCE":{"mappingDefinitions":{"3":{"database":"SNOWFLAKE_SAMPLE_DATA","schema":"TPCH_SF1"},"5":{"database":"SNOWFLAKE_SAMPLE_DATA","schema":"TPCH_SF1"}}},"SOURCE_V":{"mappingDefinitions":{"3":{"database":"SNOWFLAKE_SAMPLE_DATA","schema":"WEATHER"},"5":{"database":"SNOWFLAKE_SAMPLE_DATA","schema":"WEATHER"}}},"TARGET":{"mappingDefinitions":{"3":{"database":"JUSTIN_EDW","schema":"DEV_DEPLOY"},"5":{"database":"JUSTIN_EDW","schema":"QA_DEPLOY"}}}},"defaultStorageMapping":"TARGET","version":1,"projects":{},"packages":{}},"gitInfo":{"commit":{"message":"Deploy to environment: 5"},"oid":""},"runtimeParameters":"{\"accepted_values\":[\"shipped\",\"delivered\",\"pending\"],\"my_number\":1,\"my_string\":\"testing\"}"}